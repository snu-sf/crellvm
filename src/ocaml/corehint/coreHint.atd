type scope = [ Source | Target ] <ocaml repr="classic">

type instr_index = [ Command of int | Phinode | Terminator ]<ocaml repr="classic">

(* Position of an instruction *)
type position = {
  block_name: string;    (* block index as a string. ex : "bb0" *)
  instr_index: instr_index; (* instruction type ; a block consists of PhiNode, Commands and Terminator. *)
}

(* If age of a variable is Old, then it is a logical variable. *)
type age = [ Old | New ] <ocaml repr="classic">

type variable = {
  name: string; (* identifier of a variable *)
  age: age;     (* is this variable logical (Old) or physical (New)? *)
}


type int_type = [ IntType of (bool * int) (*signed , bitsize*) ] <ocaml repr="classic">
type float_type = [ FloatType | DoubleType | FP128Type | X86_FP80Type ] <ocaml repr="classic">

type int_value = {
  myvalue : int;
  mytype : int_type;
}
type float_value = {
  myvalue : float;
  mytype : float_type;
}

type const_value = [ IntVal of int_value | FloatVal of float_value ] <ocaml repr="classic">

type value = [VarValue of variable | ConstValue of const_value] <ocaml repr="classic">


(*****************************************)
(*              Propagates               *)
(*****************************************)

type propagate_instr = {
  lhs : variable;
  rhs_at : position;
}
type propagate_eq = {
  lhs : value;
  rhs : value;
}
type propagate_neq = {
  lhs : variable;
  rhs : variable;
}
type propagate_object = [
  | Instr of propagate_instr
  | Eq of propagate_eq
  | Neq of propagate_neq
  ] <ocaml repr="classic">

type propagate = {
  propagate : propagate_object;
  propagate_from: position;
  propagate_to: position;
  scope: scope;
}


type maydiff_global = {
  variable : variable;
}

type propagate_global_object = [ MaydiffGlobal of maydiff_global ] <ocaml repr="classic">

type propagate_global = {
  propagate : propagate_global_object;
  scope: scope;
}


(*****************************************)
(*             Inference rules           *)
(*****************************************)

type infrule_base = {
  position: position;
}

type add_assoc = {
  inherit infrule_base;
  lhs: variable;
  rhs: variable;
}

type add_sub = {
  inherit infrule_base;
  minusy : variable;
  z : variable;
}

type add_comm = {
  inherit infrule_base;
  z : variable;
}

type add_shift = {
  inherit infrule_base;
  y : variable;
}

type add_signbit = {
  inherit infrule_base;
  x : variable;
}

type add_onebit = {
  inherit infrule_base;
  z : variable;
}

type add_zext_bool = {
  inherit infrule_base;
  x : variable;
  y : variable;
}

type add_const_not = {
  inherit infrule_base;
  z : variable;
  y : variable;
}

type add_mask = {
  inherit infrule_base;
  z : variable;
  y : variable;
  yp : variable;
}

type add_select_zero = {
  inherit infrule_base;
  z : variable;
  x : variable;
  y : variable;
}

type add_select_zero2 = {
  inherit infrule_base;
  z : variable;
  x : variable;
  y : variable;
}

type add_dist_sub = {
  inherit infrule_base;
  z : variable;
  minusx : variable;
  minusy : variable;
  w : variable;
}

type sub_add = {
  inherit infrule_base;
  minusy : variable;
  z : variable;
}

type sub_mone = {
  inherit infrule_base;
  z : variable;
}

type sub_const_not = {
  inherit infrule_base;
  y : variable;
  z : variable;
}

type sub_remove = {
  inherit infrule_base;
  y : variable;
  z : variable;
}

type sub_remove2 = {
  inherit infrule_base;
  y : variable;
  z : variable;
}

type sub_onebit = {
  inherit infrule_base;
  z : variable;
}

type sub_const_add = {
  inherit infrule_base;
  y : variable;
  z : variable;
}

type sub_sdiv = {
  inherit infrule_base;
  y : variable;
  z : variable;
}

type sub_shl = {
  inherit infrule_base;
  x : variable;
  y : variable;
  z : variable;
}

type mul_bool = {
  inherit infrule_base;
  z :variable;
}

type mul_mone = {
  inherit infrule_base;
  z : variable;
}

type mul_neg = {
  inherit infrule_base;
  z : variable;
  mx : variable;
  my : variable;
}

type mul_comm = {
  inherit infrule_base;
  z : variable;
}

type mul_shl = {
  inherit infrule_base;
  z : variable;
  y : variable;
}

type remove_maydiff = {
  inherit infrule_base;
  variable : variable;
}

type command = [
  | Propagate of propagate
  | PropagateGlobal of propagate_global
  | AddAssoc of add_assoc
  | AddSub of add_sub
  | AddComm of add_comm
  | AddShift of add_shift
  | AddSignbit of add_signbit
  | AddOnebit of add_onebit
  | AddZextBool of add_zext_bool
  | AddConstNot of add_const_not
  | AddMask of add_mask
  | AddSelectZero of add_select_zero
  | AddSelectZero2 of add_select_zero2
  | AddDistSub of add_dist_sub
  | SubMone of sub_mone
  | SubAdd of sub_add
  | SubConstNot of sub_const_not
  | SubRemove of sub_remove
  | SubRemove2 of sub_remove2
  | SubOnebit of sub_onebit
  | SubConstAdd of sub_const_add
  | SubSdiv of sub_sdiv
  | SubShl of sub_shl
  | MulBool of mul_bool  
  | MulMone of mul_mone
  | MulNeg of mul_neg
  | MulComm of mul_comm
  | MulShl of mul_shl
  | RemoveMaydiff of remove_maydiff
  ] <ocaml repr="classic">


type hints = {
  module_id: string;
  function_id: string;
  opt_name: string;
  removed_instr_positions: position list;
  added_instr_positions: position list;
  commands: command list;
}
